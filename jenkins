pipeline {
    agent any

    environment {
        KUBECONFIG = credentials('config')
        git_url = 'https://github.com/Sano-Mikey/k8s-hello-app.git'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scmGit(
                    branches: [[name:'*/main']], 
                    extensions: [], 
                    userRemoteConfigs: [[
                        credentialsId: 'gitlab-access', 
                        url: env.git_url
                    ]]
                )
            }
        }

        stage('Setup Kubernetes Config') {
            steps {
                sh '''
                    mkdir -p ~/.kube
                    echo "$KUBECONFIG" > ~/.kube/config
                    chmod 600 ~/.kube/config
                    kubectl config get-contexts
                '''
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    try {
                        sh 'kubectl --context=minikube get nodes'
                        sh 'kubectl apply -f configmap.yaml'
                        sh 'kubectl apply -f deployment.yaml'
                        sh 'kubectl apply -f service.yaml'
                    } catch (error) {
                        echo "Error in deployment: ${error}"
                        throw error
                    }
                }
            }
        }

        stage('Test Deployment') {
            steps {
                script {
                    try {
                        // Wait until pods are ready
                        sh 'kubectl rollout status deployment/hello-app -n default --timeout=120s'

                        // Kill any existing port-forward processes
                        sh 'pkill -f "kubectl port-forward" || true'

                        // Test the service using port-forward
                        sh '''
                            kubectl port-forward svc/hello-app-service 8085:85 &
                            FORWARD_PID=$!
                            sleep 10
                            
                            # Test the endpoint
                            RESPONSE=$(curl -s --retry 5 --retry-delay 2 http://localhost:8085/)
                            echo "Service Response: $RESPONSE"
                            
                            # Kill port-forward process
                            kill $FORWARD_PID || true
                        '''
                    } catch (error) {
                        sh 'pkill -f "kubectl port-forward" || true'
                        echo "Error in testing: ${error}"
                        throw error
                    }
                }
            }
        }
    }

    post {
        always {
            sh '''
                kubectl get pods
                kubectl get svc
                kubectl get deployments
            '''
        }
        failure {
            sh '''
                kubectl describe pods
                kubectl logs -l app=hello-app
            '''
        }
    }
}

